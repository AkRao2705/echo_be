name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string for the deployment'
        required: true
        default: '0.1.0'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      project: ${{ secrets.PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'auth'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.ECHO_GCA }}
          token_format: 'access_token'
          project_id: ${{ env.project }}

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: asia-south1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.ECHO_GCA }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm i
        
      - name: Bump version
        run: |
          CURRENT_VERSION=$(npm pkg get version | tr -d '"')
          NEW_VERSION=${{ github.event.inputs.version }}
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            echo "Versions differ, updating to $NEW_VERSION"
            npm version $NEW_VERSION --no-git-tag-version
            echo "Updated package version: $(npm pkg get version)"
          else
            echo "Versions are the same, skipping version bump"
          fi

      - name: Push docker image
        run: npm run pushGcp
  create-release:
    needs: ['build']
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Create Tag
        run: |
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.version }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --generate-notes \
              --prerelease 
      - name: Notify Completion
        run: echo "Pre-release ${{ github.event.inputs.version }} created successfully."
  